akka {
  provider = "cluster"

  actor {
    provider = "cluster"
    default-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        //Note that ConfigChecker will compare this with the environment to see if it is a reasonable choice
        //change to 2 or to 80 to see ConfigChecker's analysis
        //We are running is small containers with no blocking code, so we will set small values
        parallelism-min = 4
        parallelism-max = 4
      }
    }
  }

  cluster {
    min-nr-of-members =  1
    log-info = on
    shutdown-after-unsuccessful-join-seed-nodes = 60s
  }

  cluster.seed-nodes = []
  coordinated-shutdown.exit-jvm = on

  discovery {
    method = "kubernetes-api"
    kubernetes-api {
      pod-namespace = "wine-quality-ml"
      pod-label-selector = "app.kubernetes.io/name=wine-quality-ml-machine-learning-model"
    }
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
        service-name = "akkavis"
        required-contact-point-nr = 1
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
      }
    }
    http {
      hostname = ""
      port = 8558
      bind-hostname = "0.0.0.0"
      bind-port = 8558
    }
  }

  remote {
    maximum-payload-bytes = 50000000 bytes
    netty.tcp {
      hostname = ""
      port = 2551
      bind-hostname = "0.0.0.0"
      bind-port = 2551
    }
  }
}

