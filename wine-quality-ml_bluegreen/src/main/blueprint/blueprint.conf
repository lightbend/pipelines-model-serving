blueprint {
  streamlets {
    winedata-ingress = pipelines.examples.modelserving.winequality.WineRecordIngress
    modeldata-ingress = pipelines.examples.modelserving.bluegreen.WineModelIngressRR
    modelsplitter-ingress = pipelines.examples.modelserving.bluegreen.ModelSplitIngress
    result-merger = pipelines.examples.modelserving.bluegreen.ModelResultsMerger
    winedata-splitter = pipelines.examples.modelserving.bluegreen.ModelSplitter
    model-serving1 = pipelines.examples.modelserving.winequality.WineModelServer
    model-serving2 = pipelines.examples.modelserving.winequality.WineModelServer
//    influx-wine-record-egress = pipelines.examples.modelserving.winequality.InfluxDBWineRecordEgress
//    influx-wine-result-egress = pipelines.examples.modelserving.winequality.InfluxDBWineResultEgress
    console-egress = pipelines.examples.modelserving.winequality.WineResultConsoleEgress
  }
  connections {
//    winedata-ingress.out = [model-serving.in-0, influx-wine-record-egress.in]
    modelsplitter-ingress.out = [winedata-splitter.in-1]
    winedata-ingress.out = [winedata-splitter.in-0]
    winedata-splitter.out-0 = [model-serving1.in-0]
    winedata-splitter.out-1 = [model-serving2.in-0]
    modeldata-ingress.out-0 = [model-serving1.in-1]
    modeldata-ingress.out-1 = [model-serving2.in-1]
//    model-serving.out = [console-egress.in, influx-wine-result-egress.in]
    model-serving1.out = [result-merger.in-0]
    model-serving2.out = [result-merger.in-1]
    result-merger.out = [console-egress.in]
  }
}
